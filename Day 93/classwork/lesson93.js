//var, Let და Const
//javaScript-ში var let და const გამოიყენება ცვლადების გამოსაცხადებლად მათ შორის მთავარი განსხვავებაა მათი ფარგლები და ამწე ქცევა
//var არის JavaScript ში ცვლადების გამოცხადების უძველესი გზა მას აქვს ფუნქციის ფარგლები რაც ნიშნავს რომ var-ით გამოცხადებული ცვლადი ხელმისაწვდომია მთელი ფუნქციის ფარგლებში მაშინაც კი თუ ის დეკლარირებულია ბლოკში 
function foo() {
    if (true) {
      var x = 10;
    }
    console.log(x); 
  }
  foo();

//let and cosnst
function foo() {
    if (true) {
      let x = 10;
    }
    console.log(x);
  }
  foo();

//let სა და const ს შორის მთავარი განსხვავება ისაა რომ const აცხადებს მუდმივობას რაც ნიშნავს რომ მისი მნიშვნელობა არ შეიძლება შეიცვალოს მას შემდეგ რაც მას მიენიჭება
const x = 10;
x = 20;

//hoisting
//hoisting არის ქცევა JavaScript-ში, სადაც var-ით გამოცხადებული ცვლადები გადატანილია მათი არეალის ზედა ნაწილში მიუხედავად იმისა თუ სად არიან ისინი რეალურად დეკლარირებული ამან შეიძლება გამოიწვიოს მოულოდნელი ქცევა
console.log(x);
var X = 10;

//var-ს აქვს ფუნქციის ფარგლები და ამწე ქცევა
//ნება და კონსტს ჰქონდეს ბლოკის არეალი და არ აქვს ამწე ქცევა
//const აცხადებს მუდმივას რაც იმას ნიშნავს რომ მისი მნიშვნელობა არ შეიძლება შეიცვალოს მას შემდეგ რაც მას მიენიჭება
//გლობალური ლოკალური და ბლოკირების სფეროები

//javaScript ში არსებობს სამი ტიპის არე

//გლობალური მასშტაბი
//გლობალური მასშტაბი არის javaScript პროგრამის ყველაზე შორეული ფარგლები ნებისმიერი ფუნქციის ან ბლოკის გარეთ გამოცხადებული ცვლადები გლობალურ მასშტაბშია
var X = 10;
console.log(x);

//ლოკალური ფარგლები
//ლოკალური არე იქმნება ფუნქციის განსაზღვრისას. ფუნქციის ფარგლებში გამოცხადებული ცვლადები ლოკალურ სკოპშია
function foo() {
    var x = 10;
    console.log(x);
  }
  foo();
  console.log(x);

//ბლოკის ფარგლები
//ბლოკის ფარგლები იქმნება, როდესაც განისაზღვრება ბლოკი ბლოკში გამოცხადებული ცვლადები ბლოკის სკოპშია
if (true) {
    let x = 10;
    console.log(x);
  }
  console.log(x);